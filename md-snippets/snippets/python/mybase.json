{
    "import": {
    "prefix": "im",
    "body": "import ${1:package/module}$0",
    "description" : "Import a package or module"
    },
    "import ... as ...": {
    "prefix": "ima",
    "body": "import ${1:package/module} as ${2:name}$0",
    "description" : "Import a package or module as name"
    },
    "from ... import ...": {
        "prefix": "fim",
        "body": "from ${1:package/module} import ${2:names}$0",
        "description" : "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
    },
    "New method": {
        "prefix": "defs",
        "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}\n$0",
        "description" : "Code snippet for a class method definition."
    },
    "New function": {
        "prefix": "def",
        "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
        "description" : "Code snippet for function definition."
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet for the if statement."
    },
    "if ... else ...": {
        "prefix": "ife",
        "body": "if ${1:condition}:\n\t${2:pass}\nelse:\n\t${3:pass}$0",
        "description" : "Code snippet for the if statement."
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
        "description" : "Code snippet to create a for loop structure."
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition}:\n\t${2:pass}$0",
        "description" : "Code snippet to create a while loop structure."
    },
    "self": {
        "prefix": ".",
        "body": "self.$0",
        "description" : "Shortend snippet to reference the self property in an object."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "Create implicitly all the code at the top level using the __name__ special variable."
    }
}
